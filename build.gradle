plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'checkstyle'
    id "com.github.spotbugs" version "5.0.13"
}

group 'de.hdm.bd'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'de.hdm.bd.timekiller.TimeKillerApplication'
    //Notwendig, damit die Anwendung mit Java 17 l√§uft?
}

javafx {
    version = "11"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base' ]
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
}

test {
    useJUnitPlatform()
    systemProperties = [
            'junit.jupiter.execution.parallel.enabled': 'false',
            'junit.jupiter.execution.parallel.mode.default': 'same_thread'
    ]
}

checkstyle {
    toolVersion "10.3.1"
    configFile file("${project.rootDir}/config/customCheckstyle.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
        xml.destination file("$project.buildDir/reports/checkstyle/checkstyle-results.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-results.html")
    }
}

task customCheckstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    //classpath = sourceSets.main.output + configurations.implementation
    classpath = files()
}

// Mark checkstyle task as non-fatal
checkstyleMain {
    ignoreFailures = true
}

checkstyleTest {
    ignoreFailures = true
}

//SpotBugs
apply plugin: "com.github.spotbugs"
spotbugs {
    ignoreFailures = true
    showStackTraces = true
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    reportsDir = file("$buildDir/reports/spotbugs")
    maxHeapSize = '2g'
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=de' ]
}
project.tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    group 'Verification'
    description 'Run Spotbugs on this project.'
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}




